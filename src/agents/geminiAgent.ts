import fs from 'fs';
import path from 'path';
import inquirer from 'inquirer';
import dotenv from 'dotenv';
import { commentOnJira } from '../services/jiraClient';

dotenv.config();

const LOG_PATH = path.resolve('test-data/sample_log.txt');
const LOCAL_LOG_PATH = path.resolve('test-data/gemini_actions.log');

/**
 * Fun√ß√£o que gera a explica√ß√£o do erro a partir do log (simulando IA).
 * Recebe o conte√∫do do log e retorna uma string explicativa.
 * Se quiser conectar a IA real, fa√ßa a chamada aqui.
 */
export async function gerarExplicacaoErro(logContent: string): Promise<string> {
  // Aqui voc√™ pode substituir pela sua integra√ß√£o com IA, por enquanto s√≥ simulo.
  // Exemplo: chamar um servi√ßo que gera a explica√ß√£o.
  // Vou simular um retorno simples para exemplificar:

  // Simula√ß√£o simples (substitua pela chamada real):
  return `Explica√ß√£o para o erro:\n\n${logContent.substring(0, 300)}... [texto gerado pela IA]`;
}

async function main() {
  try {
    // L√™ o arquivo de log
    const logContent = fs.readFileSync(LOG_PATH, 'utf-8');

    console.log('\nüìÑ Analisando logs com IA...\n');

    // Chama a fun√ß√£o que gera a explica√ß√£o, passando o conte√∫do do log
    const explanation = await gerarExplicacaoErro(logContent);

    console.log('üìç Explica√ß√£o gerada:\n');
    console.log(explanation);

    // Pergunta para o usu√°rio o que fazer
    const { action } = await inquirer.prompt([
      {
        type: 'list',
        name: 'action',
        message: 'O que deseja fazer com essa explica√ß√£o?',
        choices: [
          { name: 'Corrigir e reenviar logs', value: 'fix' },
          { name: 'Gerar resumo t√©cnico e enviar para o Jira', value: 'jira' },
          { name: 'Salvar localmente e encerrar', value: 'local' },
        ],
      },
    ]);

    if (action === 'jira') {
      const { issueKey } = await inquirer.prompt([
        {
          type: 'input',
          name: 'issueKey',
          message: 'Informe o c√≥digo do ticket Jira (ex: TQ-1):',
          validate: (input) => input.trim() !== '' || 'Informe um c√≥digo v√°lido',
        },
      ]);

      await commentOnJira(issueKey, explanation);
      console.log('\nüì¨ Coment√°rio enviado ao Jira com sucesso!');
    }

    if (action === 'local') {
      fs.appendFileSync(
        LOCAL_LOG_PATH,
        `\n[${new Date().toISOString()}]\n${explanation}\n`
      );
      console.log('\nüóÉÔ∏è Log salvo localmente em `gemini_actions.log`.');
    }

    if (action === 'fix') {
      console.log('\nüîß Corre√ß√£o simulada. Integre aqui comandos ou pipelines para corrigir.');
    }

    console.log('\n‚úÖ Agente finalizado.\n');
  } catch (err: any) {
    console.error('‚ùå Erro no agente:', err.message);
  }
}

if (require.main === module) {
  main();
}
