import fs from 'fs';
import path from 'path';
import { AIAnalysisService } from '../services/aiAnalysisService';
import { TestLogger } from '../utils/testLogger';

const logger = new TestLogger();
const aiService = new AIAnalysisService();

async function testAIAnalysis() {
  try {
    // L√™ o arquivo de log
    const logPath = path.join(__dirname, '../../test-data/error.log');
    const logContent = fs.readFileSync(logPath, 'utf-8');

    logger.info('üîç Iniciando an√°lise avan√ßada de logs...');

    // 1. Sugest√£o de corre√ß√£o
    logger.info('\nüìù Analisando erro e sugerindo corre√ß√£o...');
    const errorAnalysis = await aiService.suggestErrorFix(logContent);
    logger.info('An√°lise do erro:', JSON.stringify(errorAnalysis, null, 2));

    // 2. Prioriza√ß√£o de erros
    logger.info('\nüéØ Priorizando erros...');
    const logs = [
      logContent,
      'Erro de conex√£o com banco de dados: timeout ap√≥s 30s',
      'Erro de autentica√ß√£o: token inv√°lido'
    ];
    const prioritizedErrors = await aiService.prioritizeErrors(logs);
    logger.info('Erros priorizados:', JSON.stringify(prioritizedErrors, null, 2));

    // 3. An√°lise de impacto em produ√ß√£o
    logger.info('\nüìä Analisando impacto em produ√ß√£o...');
    const productionImpact = await aiService.analyzeProductionImpact(logContent);
    logger.info('Impacto em produ√ß√£o:', JSON.stringify(productionImpact, null, 2));

    // 4. Previs√£o de problemas similares
    logger.info('\nüîÆ Prevendo problemas similares...');
    const similarIssues = await aiService.predictSimilarIssues(logContent);
    logger.info('Problemas similares previstos:', JSON.stringify(similarIssues, null, 2));

  } catch (error) {
    logger.error('‚ùå Erro durante a an√°lise:', error);
  }
}

// Executa o teste
testAIAnalysis(); 